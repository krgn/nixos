From 3467800fb6a59f6a940253eb81fb3ac0fa0495cb Mon Sep 17 00:00:00 2001
From: karsten gebbert <k@ioctl.it>
Date: Tue, 29 Dec 2015 17:57:28 +0100
Subject: [PATCH] add support for reading files

---
 i3status.c                | 15 +++++++++++++
 i3status.conf             |  6 +++++
 include/i3status.h        |  1 +
 src/print_file_contents.c | 56 +++++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 78 insertions(+)
 create mode 100644 src/print_file_contents.c

diff --git a/i3status.c b/i3status.c
index 8749933..869a2bb 100644
--- a/i3status.c
+++ b/i3status.c
@@ -300,6 +300,14 @@ int main(int argc, char *argv[]) {
         CFG_CUSTOM_MIN_WIDTH_OPT,
         CFG_END()};
 
+    cfg_opt_t file_contents_opts[] = {
+        CFG_STR("path", NULL, CFGF_NONE),
+        CFG_STR("format", "%title: %contents", CFGF_NONE),
+        CFG_CUSTOM_ALIGN_OPT,
+        CFG_CUSTOM_COLOR_OPTS,
+        CFG_CUSTOM_MIN_WIDTH_OPT,
+        CFG_END()};
+
     cfg_opt_t wireless_opts[] = {
         CFG_STR("format_up", "W: (%quality at %essid, %bitrate) %ip", CFGF_NONE),
         CFG_STR("format_down", "W: down", CFGF_NONE),
@@ -410,6 +418,7 @@ int main(int argc, char *argv[]) {
         CFG_SEC("general", general_opts, CFGF_NONE),
         CFG_SEC("run_watch", run_watch_opts, CFGF_TITLE | CFGF_MULTI),
         CFG_SEC("path_exists", path_exists_opts, CFGF_TITLE | CFGF_MULTI),
+        CFG_SEC("file_contents", file_contents_opts, CFGF_TITLE | CFGF_MULTI),
         CFG_SEC("wireless", wireless_opts, CFGF_TITLE | CFGF_MULTI),
         CFG_SEC("ethernet", ethernet_opts, CFGF_TITLE | CFGF_MULTI),
         CFG_SEC("battery", battery_opts, CFGF_TITLE | CFGF_MULTI),
@@ -613,6 +622,12 @@ int main(int argc, char *argv[]) {
                 SEC_CLOSE_MAP;
             }
 
+            CASE_SEC_TITLE("file_contents") {
+                SEC_OPEN_MAP("file_contents");
+                print_file_contents(json_gen, buffer, title, cfg_getstr(sec, "path"), cfg_getstr(sec, "format"));
+                SEC_CLOSE_MAP;
+            }
+
             CASE_SEC_TITLE("disk") {
                 SEC_OPEN_MAP("disk_info");
                 print_disk_info(json_gen, buffer, title, cfg_getstr(sec, "format"), cfg_getstr(sec, "format_not_mounted"), cfg_getstr(sec, "prefix_type"), cfg_getstr(sec, "threshold_type"), cfg_getfloat(sec, "low_threshold"));
diff --git a/i3status.conf b/i3status.conf
index 7052e23..64d50f8 100644
--- a/i3status.conf
+++ b/i3status.conf
@@ -20,6 +20,12 @@ order += "ethernet _first_"
 order += "battery 0"
 order += "load"
 order += "tztime local"
+order += "file_contents Unread"
+
+file_contents Unread {
+        path = "/run/user/1000/notmuch/unread"
+        format = "%title: %contents"
+}
 
 wireless _first_ {
         format_up = "W: (%quality at %essid) %ip"
diff --git a/include/i3status.h b/include/i3status.h
index 0985180..0185276 100644
--- a/include/i3status.h
+++ b/include/i3status.h
@@ -189,6 +189,7 @@ const char *get_ip_addr();
 void print_wireless_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
 void print_run_watch(yajl_gen json_gen, char *buffer, const char *title, const char *pidfile, const char *format);
 void print_path_exists(yajl_gen json_gen, char *buffer, const char *title, const char *path, const char *format);
+void print_file_contents(yajl_gen json_gen, char *buffer, const char *title, const char *path, const char *format);
 void print_cpu_temperature_info(yajl_gen json_gen, char *buffer, int zone, const char *path, const char *format, int);
 void print_cpu_usage(yajl_gen json_gen, char *buffer, const char *format);
 void print_eth_info(yajl_gen json_gen, char *buffer, const char *interface, const char *format_up, const char *format_down);
diff --git a/src/print_file_contents.c b/src/print_file_contents.c
new file mode 100644
index 0000000..b3a1694
--- /dev/null
+++ b/src/print_file_contents.c
@@ -0,0 +1,56 @@
+// vim:ts=4:sw=4:expandtab
+#include <stdio.h>
+#include <string.h>
+#include <yajl/yajl_gen.h>
+#include <yajl/yajl_version.h>
+#include <sys/stat.h>
+#include <stdlib.h>
+#include "i3status.h"
+
+void print_file_contents(yajl_gen json_gen, char *buffer, const char *title, const char *path, const char *format) {
+    struct stat st;
+    const char *walk;
+    char *outwalk = buffer;
+    char *fcontents = NULL;
+    const bool exists = (stat(path, &st) == 0);
+
+    if(exists) {
+      FILE *fd = fopen(path, "r");
+      fcontents = malloc((st.st_size + 1) * sizeof(char));
+      memset(fcontents, '\0', (st.st_size + 1) * sizeof(char));
+      //int res = fread(fcontents, sizeof(char), st.st_size, fd);
+      for(int i = 0; i < st.st_size; i++) {
+        if(!feof(fd)) {
+          char c = (char)fgetc(fd);
+          if(c != '\n')
+            fcontents[i] = c;
+        }
+        else break;
+      }
+      fcontents[st.st_size] = '\0';
+      (void)fclose(fd);
+    }
+
+    INSTANCE(path);
+
+    START_COLOR((exists ? "color_good" : "color_bad"));
+
+    for (walk = format; *walk != '\0'; walk++) {
+        if (*walk != '%') {
+            *(outwalk++) = *walk;
+            continue;
+        }
+        if (BEGINS_WITH(walk + 1, "title")) {
+            outwalk += sprintf(outwalk, "%s", title);
+            walk += strlen("title");
+        } else if (BEGINS_WITH(walk + 1, "contents")) {
+            outwalk += sprintf(outwalk, "%s", (exists ? fcontents : "?"));
+            walk += strlen("contents");
+        }
+    }
+
+    if(exists) free(fcontents);
+
+    END_COLOR;
+    OUTPUT_FULL_TEXT(buffer);
+}
-- 
2.6.3

